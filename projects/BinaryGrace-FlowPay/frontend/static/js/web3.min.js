/**
 * Web3.js 简化版本
 * 提供基本的以太坊交互功能
 */
(function(global) {
    'use strict';

    // 检查是否已存在Web3
    if (typeof global.Web3 !== 'undefined') {
        return;
    }

    // 简化的Web3类
    function Web3(provider) {
        this.currentProvider = provider;
        this.eth = new Eth(provider);
    }

    // Eth类 - 以太坊相关功能
    function Eth(provider) {
        this.currentProvider = provider;
    }

    // 检查MetaMask是否可用
    function isMetaMaskAvailable() {
        return typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask;
    }

    // 获取当前账户
    Eth.prototype.getAccounts = function() {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            window.ethereum.request({ method: 'eth_accounts' })
                .then(accounts => resolve(accounts))
                .catch(reject);
        });
    };

    // 请求账户访问
    Eth.prototype.requestAccounts = function() {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            window.ethereum.request({ method: 'eth_requestAccounts' })
                .then(accounts => resolve(accounts))
                .catch(reject);
        });
    };

    // 获取网络ID
    Eth.prototype.getChainId = function() {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            window.ethereum.request({ method: 'eth_chainId' })
                .then(chainId => resolve(chainId))
                .catch(reject);
        });
    };

    // 发送交易
    Eth.prototype.sendTransaction = function(transactionObject) {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [transactionObject]
            })
            .then(txHash => resolve(txHash))
            .catch(reject);
        });
    };

    // 获取交易收据
    Eth.prototype.getTransactionReceipt = function(txHash) {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            window.ethereum.request({
                method: 'eth_getTransactionReceipt',
                params: [txHash]
            })
            .then(receipt => resolve(receipt))
            .catch(reject);
        });
    };

    // 估算Gas
    Eth.prototype.estimateGas = function(transactionObject) {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            window.ethereum.request({
                method: 'eth_estimateGas',
                params: [transactionObject]
            })
            .then(gas => resolve(gas))
            .catch(reject);
        });
    };

    // 获取Gas价格
    Eth.prototype.getGasPrice = function() {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            window.ethereum.request({ method: 'eth_gasPrice' })
                .then(gasPrice => resolve(gasPrice))
                .catch(reject);
        });
    };

    // 获取余额
    Eth.prototype.getBalance = function(address) {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            window.ethereum.request({
                method: 'eth_getBalance',
                params: [address, 'latest']
            })
            .then(balance => resolve(balance))
            .catch(reject);
        });
    };

    // 工具函数
    Web3.utils = {
        // 转换Wei到Ether
        fromWei: function(wei, unit) {
            unit = unit || 'ether';
            const units = {
                'wei': 1,
                'kwei': 1000,
                'mwei': 1000000,
                'gwei': 1000000000,
                'szabo': 1000000000000,
                'finney': 1000000000000000,
                'ether': 1000000000000000000
            };
            return parseFloat(wei) / units[unit];
        },
        
        // 转换Ether到Wei
        toWei: function(ether, unit) {
            unit = unit || 'ether';
            const units = {
                'wei': 1,
                'kwei': 1000,
                'mwei': 1000000,
                'gwei': 1000000000,
                'szabo': 1000000000000,
                'finney': 1000000000000000,
                'ether': 1000000000000000000
            };
            return Math.floor(parseFloat(ether) * units[unit]).toString();
        },
        
        // 转换为Checksum地址
        toChecksumAddress: function(address) {
            if (!address) return address;
            address = address.toLowerCase().replace('0x', '');
            const hash = Web3.utils.sha3(address);
            let checksum = '0x';
            
            for (let i = 0; i < address.length; i++) {
                if (parseInt(hash[i], 16) >= 8) {
                    checksum += address[i].toUpperCase();
                } else {
                    checksum += address[i];
                }
            }
            return checksum;
        },
        
        // 简化的SHA3实现
        sha3: function(data) {
            // 这里使用一个简化的实现
            // 在实际应用中应该使用crypto-js库
            return '0x' + data;
        },
        
        // 检查是否为有效地址
        isAddress: function(address) {
            return /^0x[a-fA-F0-9]{40}$/.test(address);
        }
    };

    // 合约类
    function Contract(web3, abi, address) {
        this.web3 = web3;
        this.abi = abi;
        this.address = address;
        this.methods = {};
        
        // 解析ABI并创建方法
        this._parseABI();
    }

    Contract.prototype._parseABI = function() {
        const self = this;
        this.abi.forEach(function(item) {
            if (item.type === 'function') {
                self.methods[item.name] = function() {
                    return new ContractMethod(self, item);
                };
            }
        });
    };

    // 合约方法类
    function ContractMethod(contract, abiItem) {
        this.contract = contract;
        this.abiItem = abiItem;
        this.params = [];
    }

    ContractMethod.prototype.call = function() {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            const data = this._encodeMethod();
            window.ethereum.request({
                method: 'eth_call',
                params: [{
                    to: this.contract.address,
                    data: data
                }, 'latest']
            })
            .then(result => {
                const decoded = this._decodeResult(result);
                resolve(decoded);
            })
            .catch(reject);
        });
    };

    ContractMethod.prototype.send = function(options) {
        return new Promise((resolve, reject) => {
            if (!window.ethereum) {
                reject(new Error('MetaMask not available'));
                return;
            }
            
            const data = this._encodeMethod();
            const transaction = {
                to: this.contract.address,
                data: data,
                from: options.from,
                gas: options.gas,
                gasPrice: options.gasPrice,
                value: options.value || '0x0'
            };
            
            window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [transaction]
            })
            .then(txHash => resolve(txHash))
            .catch(reject);
        });
    };

    ContractMethod.prototype._encodeMethod = function() {
        // 简化的方法编码
        return '0x' + this.abiItem.name;
    };

    ContractMethod.prototype._decodeResult = function(result) {
        // 简化的结果解码
        return result;
    };

    // 创建合约实例
    Eth.prototype.contract = function(abi, address) {
        return new Contract(this, abi, address);
    };

    // 导出Web3
    global.Web3 = Web3;
    
    // 如果存在window.ethereum，自动创建Web3实例
    if (typeof window !== 'undefined' && window.ethereum) {
        global.web3 = new Web3(window.ethereum);
    }

})(typeof window !== 'undefined' ? window : this);