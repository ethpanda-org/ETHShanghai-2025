# API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: polymarket
  labels:
    app: api-gateway
    component: gateway
    tier: microservice
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        component: gateway
        tier: microservice
    spec:
      containers:
      - name: api-gateway
        image: polymarket/api-gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: SERVICE_NAME
          value: "api-gateway"
        - name: SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: API_GATEWAY_PORT
        - name: TRADING_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: TRADING_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: LOG_LEVEL
        - name: WAIT_FOR_REDIS
          value: "true"
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        - name: RATE_LIMIT_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: RATE_LIMIT_REQUESTS
        - name: RATE_LIMIT_WINDOW
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: RATE_LIMIT_WINDOW
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: app-config-volume
          mountPath: /app/config
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: app-logs
        persistentVolumeClaim:
          claimName: app-logs-pvc
      - name: app-config-volume
        configMap:
          name: app-config
      restartPolicy: Always
      initContainers:
      - name: wait-for-redis
        image: busybox:1.35
        command:
        - /bin/sh
        - -c
        - |
          until nc -z redis 6379; do
            echo "Waiting for Redis to be ready..."
            sleep 2
          done
          echo "Redis is ready!"
---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: polymarket
  labels:
    app: api-gateway
    component: gateway
    tier: microservice
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: api-gateway
---
# API Gateway HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: polymarket
  labels:
    app: api-gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15