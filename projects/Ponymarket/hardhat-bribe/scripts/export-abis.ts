import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get network from command line args or environment variable
const network = process.argv[2] || process.env.NETWORK || 'localhost';
const chainIdMap: Record<string, number> = {
  localhost: 31337,
  hashkeyTestnet: 133,
  sepolia: 11155111,
};
const chainId = chainIdMap[network] || 31337;

const artifactsDir = path.join(__dirname, '../artifacts/contracts');
const outputDir = path.join(__dirname, '../../vite-bribe/src/contracts');
const deployedAddressesPath = path.join(__dirname, `../ignition/deployments/chain-${chainId}/deployed_addresses.json`);
const viteEnvPath = path.join(__dirname, '../../vite-bribe/.env.local');
const nestEnvPath = path.join(__dirname, '../../nestjs-bribe/.env');

// Contracts to export
const contracts = [
  { name: 'MockCTF', path: 'mock/MockCTF.sol' },
  { name: 'MockERC20', path: 'mock/MockERC20.sol' },
  { name: 'StakingBribe', path: 'StakingBribe.sol' },
  { name: 'BribeManager', path: 'BribeManager.sol' },
  { name: 'PonyProtocol', path: 'PonyProtocol.sol' },
];

// Create output directory
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Export ABIs
contracts.forEach(({ name, path: contractPath }) => {
  const artifactPath = path.join(artifactsDir, contractPath, `${name}.json`);

  if (fs.existsSync(artifactPath)) {
    const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));

    const output = {
      abi: artifact.abi,
      bytecode: artifact.bytecode,
    };

    const outputPath = path.join(outputDir, `${name}.json`);
    fs.writeFileSync(outputPath, JSON.stringify(output, null, 2));

    console.log(`‚úÖ Exported ${name} ABI to ${outputPath}`);
  } else {
    console.error(`‚ùå Artifact not found: ${artifactPath}`);
  }
});

// Export deployed addresses to frontend and backend .env files
if (fs.existsSync(deployedAddressesPath)) {
  const deployedAddresses = JSON.parse(fs.readFileSync(deployedAddressesPath, 'utf8'));
  const mockCTFAddress = deployedAddresses['DeployModule#MockCTF'];
  const mockUSDCAddress = deployedAddresses['DeployModule#MockUSDC'];
  const rewardTokenAddress = deployedAddresses['DeployModule#RewardToken'];
  const stakingBribeAddress = deployedAddresses['DeployModule#StakingBribe'];
  const bribeManagerAddress = deployedAddresses['DeployModule#BribeManager'];
  const ponyProtocolAddress = deployedAddresses['DeployModule#PonyProtocol'];

  // Determine network name and RPC URL for env files
  const networkName = network === 'localhost' ? 'localhost' : network;
  const rpcUrlMap: Record<string, string> = {
    localhost: 'http://127.0.0.1:8545',
    hashkeyTestnet: 'https://testnet.hsk.xyz',
    sepolia: 'https://ethereum-sepolia-rpc.publicnode.com',
  };
  const rpcUrl = rpcUrlMap[network] || 'http://127.0.0.1:8545';

  const viteNetworkMap: Record<string, string> = {
    localhost: 'localhost',
    hashkeyTestnet: 'hashkey',
    sepolia: 'sepolia',
  };
  const viteNetwork = viteNetworkMap[network] || 'localhost';

  // Vite frontend .env.local (VITE_ prefix)
  const viteEnvContent = `# Auto-generated by export-abis.ts - DO NOT EDIT MANUALLY
# Contract addresses deployed to ${networkName} (chain-${chainId})
VITE_NETWORK=${viteNetwork}
VITE_MOCK_CTF_ADDRESS=${mockCTFAddress}
VITE_MOCK_USDC_ADDRESS=${mockUSDCAddress}
VITE_REWARD_TOKEN_ADDRESS=${rewardTokenAddress}
VITE_STAKING_BRIBE_ADDRESS=${stakingBribeAddress}
VITE_BRIBE_MANAGER_ADDRESS=${bribeManagerAddress}
VITE_PONY_PROTOCOL_ADDRESS=${ponyProtocolAddress}
`;
  fs.writeFileSync(viteEnvPath, viteEnvContent);
  console.log(`‚úÖ Exported contract addresses to ${viteEnvPath}`);

  // NestJS backend .env (no prefix)
  const nestEnvContent = `# Auto-generated by export-abis.ts - DO NOT EDIT MANUALLY
# Contract addresses deployed to ${networkName} (chain-${chainId})
RPC_URL=${rpcUrl}
MOCK_CTF_ADDRESS=${mockCTFAddress}
MOCK_USDC_ADDRESS=${mockUSDCAddress}
REWARD_TOKEN_ADDRESS=${rewardTokenAddress}
STAKING_BRIBE_ADDRESS=${stakingBribeAddress}
BRIBE_MANAGER_ADDRESS=${bribeManagerAddress}
PONY_PROTOCOL_ADDRESS=${ponyProtocolAddress}
`;
  fs.writeFileSync(nestEnvPath, nestEnvContent);
  console.log(`‚úÖ Exported contract addresses to ${nestEnvPath}`);

  console.log(`\nüìç Deployed addresses:`);
  console.log(`   - MockCTF: ${mockCTFAddress}`);
  console.log(`   - MockUSDC: ${mockUSDCAddress}`);
  console.log(`   - RewardToken: ${rewardTokenAddress}`);
  console.log(`   - StakingBribe: ${stakingBribeAddress}`);
  console.log(`   - BribeManager: ${bribeManagerAddress}`);
  console.log(`   - PonyProtocol: ${ponyProtocolAddress}`);
} else {
  console.warn(`‚ö†Ô∏è  Deployed addresses not found at ${deployedAddressesPath}`);
  console.warn('   Run: npx hardhat ignition deploy ignition/modules/Deploy.ts --network localhost');
}

console.log('\nüéâ Export complete!');
