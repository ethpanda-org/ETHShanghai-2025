import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

/**
 * ÈÉ®ÁΩ≤Â§öÂπ≥Âè∞ ZK-RWA Á≥ªÁªüÔºàÊé®ËçêÊñπÊ°àÔºâ
 * 
 * Êû∂ÊûÑÔºö
 * 1. ‰∏â‰∏™Áã¨Á´ãÈ™åËØÅÂô®ÔºàPropertyFy, RealT, RealestateIOÔºâ
 * 2. ZKRWARegistryMultiPlatformÔºàÂ§öÂπ≥Âè∞Ë∫´‰ªΩÊ≥®ÂÜåÔºâ
 * 3. ZKComplianceModuleÔºàERC-3643 Âç≥ÊèíÂç≥Áî®Ôºâ
 * 
 * ‰ΩøÁî®ÊñπÊ≥ï:
 * npx hardhat run scripts/deploy-multi-platform-system.ts --network sepolia
 * ÊàñÊú¨Âú∞ÊµãËØï:
 * npx hardhat run scripts/deploy-multi-platform-system.ts --network localhost
 */
async function main() {
  console.log("\nüöÄ ÂºÄÂßãÈÉ®ÁΩ≤Â§öÂπ≥Âè∞ ZK-RWA Á≥ªÁªü...");
  console.log("="‚Äã.repeat(80));

  const [deployer] = await ethers.getSigners();
  const network = await ethers.provider.getNetwork();
  
  console.log("\nüìù ÈÉ®ÁΩ≤‰ø°ÊÅØ:");
  console.log("  ÁΩëÁªú:", network.name);
  console.log("  ÈìæID:", network.chainId);
  console.log("  ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
  console.log("  Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.formatEther(await ethers.provider.getBalance(deployer.address)), "ETH");
  
  console.log("\n" + "=".repeat(80));
  
  const deployedContracts: any = {};

  // ============ Ê≠•È™§ 1: ÈÉ®ÁΩ≤‰∏â‰∏™È™åËØÅÂô®ÂêàÁ∫¶ ============
  
  console.log("\nüìã Ê≠•È™§ 1/4: ÈÉ®ÁΩ≤È™åËØÅÂô®ÂêàÁ∫¶");
  console.log("-".repeat(80));
  
  // 1.1 PropertyFy È™åËØÅÂô® (12 ‰ø°Âè∑)
  console.log("\n1.1 ÈÉ®ÁΩ≤ PropertyFyVerifier (12 ‰∏™ÂÖ¨ÂÖ±‰ø°Âè∑)...");
  const PropertyFyVerifier = await ethers.getContractFactory("PropertyFyVerifier");
  const propertyfyVerifier = await PropertyFyVerifier.deploy();
  await propertyfyVerifier.waitForDeployment();
  deployedContracts.propertyfyVerifier = await propertyfyVerifier.getAddress();
  console.log("    ‚úÖ PropertyFyVerifier:", deployedContracts.propertyfyVerifier);
  
  // 1.2 RealT È™åËØÅÂô® (12 ‰ø°Âè∑)
  console.log("\n1.2 ÈÉ®ÁΩ≤ RealTVerifier (12 ‰∏™ÂÖ¨ÂÖ±‰ø°Âè∑)...");
  const RealTVerifier = await ethers.getContractFactory("RealTVerifier");
  const realtVerifier = await RealTVerifier.deploy();
  await realtVerifier.waitForDeployment();
  deployedContracts.realtVerifier = await realtVerifier.getAddress();
  console.log("    ‚úÖ RealTVerifier:", deployedContracts.realtVerifier);
  
  // 1.3 RealestateIO È™åËØÅÂô® (16 ‰ø°Âè∑)
  console.log("\n1.3 ÈÉ®ÁΩ≤ RealestateVerifier (16 ‰∏™ÂÖ¨ÂÖ±‰ø°Âè∑)...");
  const RealestateVerifier = await ethers.getContractFactory("RealestateVerifier");
  const realestateVerifier = await RealestateVerifier.deploy();
  await realestateVerifier.waitForDeployment();
  deployedContracts.realestateVerifier = await realestateVerifier.getAddress();
  console.log("    ‚úÖ RealestateVerifier:", deployedContracts.realestateVerifier);
  
  // ============ Ê≠•È™§ 2: ÈÉ®ÁΩ≤Â§öÂπ≥Âè∞Ê≥®ÂÜåÂêàÁ∫¶ ============
  
  console.log("\n\nüìã Ê≠•È™§ 2/4: ÈÉ®ÁΩ≤ ZKRWARegistryMultiPlatform");
  console.log("-".repeat(80));
  
  const ZKRWARegistryMultiPlatform = await ethers.getContractFactory("ZKRWARegistryMultiPlatform");
  const registry = await ZKRWARegistryMultiPlatform.deploy(
    deployedContracts.propertyfyVerifier,
    deployedContracts.realtVerifier,
    deployedContracts.realestateVerifier
  );
  await registry.waitForDeployment();
  deployedContracts.registry = await registry.getAddress();
  
  console.log("\n‚úÖ ZKRWARegistryMultiPlatform Â∑≤ÈÉ®ÁΩ≤:", deployedContracts.registry);
  console.log("  ÊîØÊåÅÂπ≥Âè∞:");
  console.log("    - PropertyFy (12 ‰ø°Âè∑)");
  console.log("    - RealT (12 ‰ø°Âè∑)");
  console.log("    - RealestateIO (16 ‰ø°Âè∑)");
  
  // ============ Ê≠•È™§ 3: ÈÉ®ÁΩ≤ ZKComplianceModule ============
  
  console.log("\n\nüìã Ê≠•È™§ 3/4: ÈÉ®ÁΩ≤ ZKComplianceModuleÔºàÂç≥ÊèíÂç≥Áî®Ôºâ");
  console.log("-".repeat(80));
  
  const ZKComplianceModule = await ethers.getContractFactory("ZKComplianceModule");
  const complianceModule = await ZKComplianceModule.deploy(
    deployedContracts.registry,
    ethers.ZeroAddress,  // complianceGateway ÊöÇÊó∂‰∏∫Á©∫
    "propertyfy"         // ÈªòËÆ§Âπ≥Âè∞
  );
  await complianceModule.waitForDeployment();
  deployedContracts.complianceModule = await complianceModule.getAddress();
  
  console.log("\n‚úÖ ZKComplianceModule Â∑≤ÈÉ®ÁΩ≤:", deployedContracts.complianceModule);
  console.log("  ERC-3643 Âç≥ÊèíÂç≥Áî®ÂêàËßÑÊ®°Âùó");
  console.log("  ÈªòËÆ§Âπ≥Âè∞: PropertyFy");
  
  // ============ Ê≠•È™§ 4: ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ ============
  
  console.log("\n\nüìã Ê≠•È™§ 4/4: ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ");
  console.log("-".repeat(80));
  
  const deploymentInfo = {
    network: network.name,
    chainId: Number(network.chainId),
    timestamp: new Date().toISOString(),
    deployer: deployer.address,
    architecture: "Registry + Adapter (Two-Step)",
    contracts: {
      verifiers: {
        propertyfy: {
          address: deployedContracts.propertyfyVerifier,
          publicSignals: 12,
          modules: ["KYC", "ASSET"]
        },
        realt: {
          address: deployedContracts.realtVerifier,
          publicSignals: 12,
          modules: ["KYC", "AML"]
        },
        realestate: {
          address: deployedContracts.realestateVerifier,
          publicSignals: 16,
          modules: ["KYC", "ASSET", "AML"]
        }
      },
      core: {
        zkRegistry: {
          address: deployedContracts.registry,
          description: "Multi-platform identity registry"
        },
        complianceModule: {
          address: deployedContracts.complianceModule,
          description: "ERC-3643 plug-and-play compliance module"
        }
      }
    },
    integrationGuide: {
      step1: "User generates ZK proof for their chosen platform",
      step2: "User calls zkRegistry.registerIdentity(platform, proof...)",
      step3: "RWA project: rwaToken.setComplianceModule(complianceModule.address)",
      step4: "Users can trade RWA tokens anonymously"
    }
  };

  // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
  const deploymentsDir = path.join(__dirname, "../deployments");
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
  }

  const timestamp = Date.now();
  const deploymentFile = path.join(
    deploymentsDir,
    `multi-platform-${network.name}-${timestamp}.json`
  );
  
  fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
  console.log("\nüíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠ò:", deploymentFile);
  
  // ============ ÈÉ®ÁΩ≤ÊÄªÁªì ============
  
  console.log("\n\n" + "=".repeat(80));
  console.log("üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ");
  console.log("=".repeat(80));
  
  console.log("\nüìç ÂêàÁ∫¶Âú∞ÂùÄ:");
  console.log("  PropertyFyVerifier:    ", deployedContracts.propertyfyVerifier);
  console.log("  RealTVerifier:         ", deployedContracts.realtVerifier);
  console.log("  RealestateVerifier:    ", deployedContracts.realestateVerifier);
  console.log("  ZKRWARegistry:         ", deployedContracts.registry);
  console.log("  ZKComplianceModule:    ", deployedContracts.complianceModule);
  
  console.log("\nüìù ÂâçÁ´ØÈÖçÁΩÆÊõ¥Êñ∞:");
  console.log("ËØ∑Êõ¥Êñ∞ lib/contracts/addresses.ts:");
  console.log("```typescript");
  console.log(`  ${network.name}: {`);
  console.log(`    verifiers: {`);
  console.log(`      propertyfy: "${deployedContracts.propertyfyVerifier}",`);
  console.log(`      realt: "${deployedContracts.realtVerifier}",`);
  console.log(`      realestate: "${deployedContracts.realestateVerifier}",`);
  console.log(`    },`);
  console.log(`    registry: "${deployedContracts.registry}",`);
  console.log(`    complianceModule: "${deployedContracts.complianceModule}",`);
  console.log(`  },`);
  console.log("```");
  
  console.log("\nüìö RWA È°πÁõÆÈõÜÊàêÁ§∫‰æã:");
  console.log("```solidity");
  console.log("// ‰ªª‰Ωï ERC-3643 RWA ‰ª£Â∏ÅÈÉΩÂèØ‰ª•Âç≥ÊèíÂç≥Áî®Ôºö");
  console.log(`await rwaToken.setComplianceModule("${deployedContracts.complianceModule}")`);
  console.log("// ‚úÖ ÂÆåÊàêÔºÅ‰ª£Â∏ÅÁ´ãÂç≥ÊîØÊåÅÈöêÁßÅ‰øùÊä§ÔºÅ");
  console.log("```");
  
  console.log("\nüß™ ÊµãËØïÊ≠•È™§:");
  console.log("1. Êõ¥Êñ∞ÂâçÁ´ØÈÖçÁΩÆÊñá‰ª∂");
  console.log("2. ÈáçÂêØÂâçÁ´Ø: npm run dev");
  console.log("3. ËÆøÈóÆ: http://localhost:3000/proof-generation");
  console.log("4. ÈÄâÊã©Âπ≥Âè∞Âπ∂ÁîüÊàêËØÅÊòé");
  console.log("5. ÊµãËØïÈìæ‰∏äÊ≥®ÂÜå");
  
  console.log("\n‚ú® ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:");
    console.error(error);
    process.exit(1);
  });

