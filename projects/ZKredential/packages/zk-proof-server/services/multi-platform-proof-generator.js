/**
 * Â§öÂπ≥Âè∞ËØÅÊòéÁîüÊàêÂô®
 * Ê†πÊçÆ‰∏çÂêåÂπ≥Âè∞‰ΩøÁî®‰∏çÂêåÁöÑÁîµË∑Ø
 */

import { ProofGenerator } from './proof-generator.js';
import SERVER_CONFIG from '../config/server-config.js';
import { validateAndCleanFields } from '../utils/field-validator.js';
import fs from 'fs';

export class MultiPlatformProofGenerator {
  constructor() {
    this.generators = {};
    this.initializeGenerators();
  }

  /**
   * ÂàùÂßãÂåñÊâÄÊúâÂπ≥Âè∞ÁöÑËØÅÊòéÁîüÊàêÂô®
   */
  initializeGenerators() {
    const platforms = ['propertyfy', 'realt', 'realestate'];
    
    for (const platform of platforms) {
      const config = SERVER_CONFIG.circuits[platform];
      if (!config) {
        console.warn(`‚ö†Ô∏è Âπ≥Âè∞ ${platform} ÈÖçÁΩÆ‰∏çÂ≠òÂú®`);
        continue;
      }

      // Ê£ÄÊü•ÁîµË∑ØÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
      const wasmExists = fs.existsSync(config.wasmPath);
      
      if (wasmExists) {
        try {
          // ProofGenerator ÈúÄË¶ÅÂÆåÊï¥ÁöÑÈÖçÁΩÆÂØπË±°
          this.generators[platform] = new ProofGenerator({
            circuits: {
              basePath: './circuits',  // Ê∑ªÂä† basePath
              wasmPath: config.wasmPath,
              zkeyPath: config.zkeyPath,
              vkeyPath: config.vkeyPath
            }
          });
          console.log(`‚úÖ ${config.name} (${platform}) ËØÅÊòéÁîüÊàêÂô®Â∑≤ÂàùÂßãÂåñ`);
        } catch (error) {
          console.error(`‚ùå ${platform} ËØÅÊòéÁîüÊàêÂô®ÂàùÂßãÂåñÂ§±Ë¥•:`, error.message);
        }
      } else {
        console.warn(`‚ö†Ô∏è ${platform} ÁîµË∑ØÊñá‰ª∂‰∏çÂ≠òÂú®: ${config.wasmPath}ÔºåÂ∞Ü‰ΩøÁî®Ê®°ÊãüËØÅÊòé`);
      }
    }
  }

  /**
   * Ëé∑ÂèñÂπ≥Âè∞‰ø°ÊÅØ
   */
  getPlatformInfo(platform) {
    const config = SERVER_CONFIG.circuits[platform];
    if (!config) {
      throw new Error(`‰∏çÊîØÊåÅÁöÑÂπ≥Âè∞: ${platform}`);
    }
    
    return {
      platform,
      name: config.name,
      description: config.description,
      modules: config.modules,
      publicSignalsCount: config.publicSignalsCount,
      available: !!this.generators[platform]
    };
  }

  /**
   * Ëé∑ÂèñÊâÄÊúâÂπ≥Âè∞‰ø°ÊÅØ
   */
  getAllPlatforms() {
    return ['propertyfy', 'realt', 'realestate'].map(platform => 
      this.getPlatformInfo(platform)
    );
  }

  /**
   * Ê†πÊçÆÂπ≥Âè∞ÁîüÊàêËØÅÊòé
   */
  async generateProof(platform, zkInput) {
    // Ëé∑ÂèñÂπ≥Âè∞ÈÖçÁΩÆ
    const config = SERVER_CONFIG.circuits[platform];
    if (!config) {
      throw new Error(`‰∏çÊîØÊåÅÁöÑÂπ≥Âè∞: ${platform}`);
    }

    console.log(`üöÄ ‰∏∫Âπ≥Âè∞ ${config.name} (${platform}) ÁîüÊàêËØÅÊòé...`);
    console.log(`üìã Ê®°Âùó: ${config.modules.join(' + ')}`);

    // ‚úÖ È™åËØÅÂπ∂Ê∏ÖÁêÜÂ≠óÊÆµÔºàÂÖ≥ÈîÆ‰øÆÂ§çÔºÅÔºâ
    const validation = validateAndCleanFields(platform, zkInput);
    if (!validation.valid) {
      throw new Error(`${platform} Âπ≥Âè∞Áº∫Â∞ëÂøÖÈúÄÂ≠óÊÆµ: ${validation.missingFields.join(', ')}`);
    }
    
    const cleanedInput = validation.cleanedInput;
    console.log(`üßπ Â≠óÊÆµÊ∏ÖÁêÜÂÆåÊàêÔºåËæìÂÖ•Â≠óÊÆµÊï∞: ${Object.keys(cleanedInput).length}`);

    // Ëé∑ÂèñÂØπÂ∫îÁöÑËØÅÊòéÁîüÊàêÂô®
    const generator = this.generators[platform];
    if (!generator) {
      console.warn(`‚ö†Ô∏è ${platform} ËØÅÊòéÁîüÊàêÂô®‰∏çÂèØÁî®Ôºå‰ΩøÁî®Ê®°ÊãüËØÅÊòé`);
      return this.generateMockProof(platform, cleanedInput);
    }

    try {
      // ÁîüÊàêÁúüÂÆûËØÅÊòé
      const proof = await generator.generateProof(cleanedInput);
      
      // Ê∑ªÂä†Âπ≥Âè∞‰ø°ÊÅØ
      proof.platform = platform;
      proof.platformName = config.name;
      proof.modules = config.modules;
      
      return proof;
    } catch (error) {
      console.error(`‚ùå ${platform} ÁúüÂÆûËØÅÊòéÁîüÊàêÂ§±Ë¥•:`, error.message);
      console.log(`üé≠ ÈôçÁ∫ßÂà∞Ê®°ÊãüËØÅÊòé...`);
      return this.generateMockProof(platform, cleanedInput);
    }
  }

  /**
   * ÁîüÊàêÊ®°ÊãüËØÅÊòé
   */
  generateMockProof(platform, zkInput) {
    const config = SERVER_CONFIG.circuits[platform];
    const generator = this.generators[SERVER_CONFIG.circuits.default];
    
    if (generator && generator.generateMockProof) {
      const mockProof = generator.generateMockProof(zkInput);
      mockProof.platform = platform;
      mockProof.platformName = config.name;
      mockProof.modules = config.modules;
      mockProof.warning = `‰ΩøÁî®Ê®°ÊãüËØÅÊòé (${platform} ÁîµË∑Ø‰∏çÂèØÁî®)`;
      return mockProof;
    }

    throw new Error(`Êó†Ê≥ïÁîüÊàê ${platform} ÁöÑËØÅÊòé`);
  }

  /**
   * È™åËØÅËØÅÊòé
   */
  async verifyProof(platform, proofResult) {
    const generator = this.generators[platform];
    if (!generator) {
      throw new Error(`${platform} ËØÅÊòéÁîüÊàêÂô®‰∏çÂèØÁî®`);
    }

    return await generator.verifyProof(proofResult);
  }

  /**
   * ÂÅ•Â∫∑Ê£ÄÊü•
   */
  healthCheck() {
    const platforms = this.getAllPlatforms();
    const availableCount = platforms.filter(p => p.available).length;
    
    return {
      status: availableCount > 0 ? 'healthy' : 'degraded',
      platforms,
      availableCount,
      totalCount: platforms.length,
      memory: process.memoryUsage(),
      timestamp: Date.now()
    };
  }
}

// ÂØºÂá∫Âçï‰æã
export const multiPlatformProofGenerator = new MultiPlatformProofGenerator();

